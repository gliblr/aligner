/*
 * DiamondAligner.java
 *
 * Created on June 14, 2005, 3:26 PM
 */

import java.io.*;
import java.util.*;
import java.awt.*;
import java.lang.*;
import java.awt.event.*;
import javax.swing.*;
import javax.swing.table.*;
import javax.swing.table.AbstractTableModel;

/**
 * Diamond Aligner v0.4
 * @author  Kevin "Gali" Baler
 * National Institutes of Health at Bethesda, MD
 * kb263@cornell.edu
 */
public class DiamondAligner extends javax.swing.JFrame implements ActionListener, Runnable{
    
    Vector diamonds = new Vector(); //Vector of diamonds
    Vector uppercasediamonds = new Vector(); //Vector of diamonds
    String sequence = new String();
    String uppercasesequence = new String();
    int mismatch = 0;
    int maximum = 0;
    int length = 0;
    int sequencelength = 0;
    Dialog dg;
    Thread thread;
    boolean canceled;
    
    /** Creates new form DiamondAligner */
    public DiamondAligner() {
        initComponents();
    }
    
    /** This method is called from within the constructor to
     * initialize the form.
     * WARNING: Do NOT modify this code. The content of this method is
     * always regenerated by the Form Editor.
     */
    // <editor-fold defaultstate="collapsed" desc=" Generated Code ">//GEN-BEGIN:initComponents
    private void initComponents() {
        java.awt.GridBagConstraints gridBagConstraints;

        jPanel1 = new javax.swing.JPanel();
        jScrollPane2 = new javax.swing.JScrollPane();
        jSequenceText = new javax.swing.JTextArea();
        jScrollPane1 = new javax.swing.JScrollPane();
        jDiamondText = new javax.swing.JTextArea();
        jLabel4 = new javax.swing.JLabel();
        jLabel3 = new javax.swing.JLabel();
        jOutputText = new javax.swing.JTextField();
        jMismatchText = new javax.swing.JTextField();
        jLabel2 = new javax.swing.JLabel();
        jLabel1 = new javax.swing.JLabel();
        jMaximumText = new javax.swing.JTextField();
        jLabel5 = new javax.swing.JLabel();
        jPanel2 = new javax.swing.JPanel();
        jCancelButton = new javax.swing.JButton();
        jAlignButton = new javax.swing.JButton();
        jSClear = new javax.swing.JButton();
        jSequenceBrowse = new javax.swing.JButton();
        jDClear = new javax.swing.JButton();
        jDiamondBrowse = new javax.swing.JButton();
        jProgressBar1 = new javax.swing.JProgressBar();
        jMenuBar1 = new javax.swing.JMenuBar();
        jMenu1 = new javax.swing.JMenu();
        openD = new javax.swing.JMenuItem();
        openS = new javax.swing.JMenuItem();
        reset = new javax.swing.JMenuItem();
        jSeparator2 = new javax.swing.JSeparator();
        align = new javax.swing.JMenuItem();
        jSeparator1 = new javax.swing.JSeparator();
        exit = new javax.swing.JMenuItem();
        jMenu2 = new javax.swing.JMenu();
        help = new javax.swing.JMenuItem();
        about = new javax.swing.JMenuItem();

        getContentPane().setLayout(new java.awt.GridBagLayout());

        setDefaultCloseOperation(javax.swing.WindowConstants.EXIT_ON_CLOSE);
        setTitle("Diamond Alignment");
        setCursor(new java.awt.Cursor(java.awt.Cursor.DEFAULT_CURSOR));
        setResizable(false);
        jPanel1.setLayout(new java.awt.GridBagLayout());

        jScrollPane2.setPreferredSize(new java.awt.Dimension(300, 100));
        jSequenceText.setFont(new java.awt.Font("Monospaced", 0, 13));
        jScrollPane2.setViewportView(jSequenceText);

        gridBagConstraints = new java.awt.GridBagConstraints();
        gridBagConstraints.gridx = 0;
        gridBagConstraints.gridy = 6;
        gridBagConstraints.gridwidth = 3;
        gridBagConstraints.gridheight = 4;
        gridBagConstraints.fill = java.awt.GridBagConstraints.BOTH;
        gridBagConstraints.insets = new java.awt.Insets(0, 0, 10, 0);
        jPanel1.add(jScrollPane2, gridBagConstraints);

        jScrollPane1.setMaximumSize(new java.awt.Dimension(300, 200));
        jScrollPane1.setPreferredSize(new java.awt.Dimension(300, 100));
        jDiamondText.setFont(new java.awt.Font("Monospaced", 0, 13));
        jScrollPane1.setViewportView(jDiamondText);

        gridBagConstraints = new java.awt.GridBagConstraints();
        gridBagConstraints.gridx = 0;
        gridBagConstraints.gridy = 1;
        gridBagConstraints.gridwidth = 3;
        gridBagConstraints.gridheight = 4;
        gridBagConstraints.fill = java.awt.GridBagConstraints.BOTH;
        gridBagConstraints.insets = new java.awt.Insets(0, 0, 10, 0);
        jPanel1.add(jScrollPane1, gridBagConstraints);

        jLabel4.setText("Output Length");
        gridBagConstraints = new java.awt.GridBagConstraints();
        gridBagConstraints.gridx = 0;
        gridBagConstraints.gridy = 12;
        gridBagConstraints.anchor = java.awt.GridBagConstraints.EAST;
        gridBagConstraints.insets = new java.awt.Insets(5, 0, 0, 0);
        jPanel1.add(jLabel4, gridBagConstraints);

        jLabel3.setText("Mismatch");
        gridBagConstraints = new java.awt.GridBagConstraints();
        gridBagConstraints.gridx = 0;
        gridBagConstraints.gridy = 10;
        gridBagConstraints.anchor = java.awt.GridBagConstraints.EAST;
        jPanel1.add(jLabel3, gridBagConstraints);

        jOutputText.setText("100");
        gridBagConstraints = new java.awt.GridBagConstraints();
        gridBagConstraints.gridx = 1;
        gridBagConstraints.gridy = 12;
        gridBagConstraints.fill = java.awt.GridBagConstraints.HORIZONTAL;
        gridBagConstraints.ipadx = 40;
        gridBagConstraints.insets = new java.awt.Insets(5, 15, 0, 0);
        jPanel1.add(jOutputText, gridBagConstraints);

        jMismatchText.setText("0");
        gridBagConstraints = new java.awt.GridBagConstraints();
        gridBagConstraints.gridx = 1;
        gridBagConstraints.gridy = 10;
        gridBagConstraints.fill = java.awt.GridBagConstraints.HORIZONTAL;
        gridBagConstraints.ipadx = 40;
        gridBagConstraints.insets = new java.awt.Insets(0, 15, 0, 0);
        jPanel1.add(jMismatchText, gridBagConstraints);

        jLabel2.setText("Sequence");
        gridBagConstraints = new java.awt.GridBagConstraints();
        gridBagConstraints.gridx = 0;
        gridBagConstraints.gridy = 5;
        gridBagConstraints.anchor = java.awt.GridBagConstraints.WEST;
        jPanel1.add(jLabel2, gridBagConstraints);

        jLabel1.setText("Diamond Segments");
        gridBagConstraints = new java.awt.GridBagConstraints();
        gridBagConstraints.gridx = 0;
        gridBagConstraints.gridy = 0;
        gridBagConstraints.anchor = java.awt.GridBagConstraints.WEST;
        jPanel1.add(jLabel1, gridBagConstraints);

        jMaximumText.setText("100");
        gridBagConstraints = new java.awt.GridBagConstraints();
        gridBagConstraints.gridx = 1;
        gridBagConstraints.gridy = 11;
        gridBagConstraints.fill = java.awt.GridBagConstraints.HORIZONTAL;
        gridBagConstraints.ipadx = 40;
        gridBagConstraints.anchor = java.awt.GridBagConstraints.WEST;
        gridBagConstraints.insets = new java.awt.Insets(5, 15, 0, 0);
        jPanel1.add(jMaximumText, gridBagConstraints);

        jLabel5.setText("Out of");
        gridBagConstraints = new java.awt.GridBagConstraints();
        gridBagConstraints.gridx = 0;
        gridBagConstraints.gridy = 11;
        gridBagConstraints.anchor = java.awt.GridBagConstraints.EAST;
        gridBagConstraints.insets = new java.awt.Insets(5, 0, 0, 0);
        jPanel1.add(jLabel5, gridBagConstraints);

        gridBagConstraints = new java.awt.GridBagConstraints();
        gridBagConstraints.gridx = 0;
        gridBagConstraints.gridy = 0;
        gridBagConstraints.insets = new java.awt.Insets(5, 15, 10, 10);
        getContentPane().add(jPanel1, gridBagConstraints);

        jPanel2.setLayout(new java.awt.GridBagLayout());

        jCancelButton.setText("Cancel");
        jCancelButton.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                jCancelButtonActionPerformed(evt);
            }
        });

        gridBagConstraints = new java.awt.GridBagConstraints();
        gridBagConstraints.gridx = 0;
        gridBagConstraints.gridy = 5;
        gridBagConstraints.fill = java.awt.GridBagConstraints.HORIZONTAL;
        gridBagConstraints.anchor = java.awt.GridBagConstraints.WEST;
        gridBagConstraints.insets = new java.awt.Insets(3, 0, 3, 0);
        jPanel2.add(jCancelButton, gridBagConstraints);

        jAlignButton.setText("Align");
        jAlignButton.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                jAlignButtonActionPerformed(evt);
            }
        });

        gridBagConstraints = new java.awt.GridBagConstraints();
        gridBagConstraints.gridx = 0;
        gridBagConstraints.gridy = 4;
        gridBagConstraints.fill = java.awt.GridBagConstraints.HORIZONTAL;
        gridBagConstraints.anchor = java.awt.GridBagConstraints.WEST;
        gridBagConstraints.insets = new java.awt.Insets(40, 0, 3, 0);
        jPanel2.add(jAlignButton, gridBagConstraints);

        jSClear.setText("Clear");
        jSClear.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                jSClearActionPerformed(evt);
            }
        });

        gridBagConstraints = new java.awt.GridBagConstraints();
        gridBagConstraints.gridx = 0;
        gridBagConstraints.gridy = 3;
        gridBagConstraints.fill = java.awt.GridBagConstraints.HORIZONTAL;
        gridBagConstraints.anchor = java.awt.GridBagConstraints.WEST;
        gridBagConstraints.insets = new java.awt.Insets(2, 0, 0, 0);
        jPanel2.add(jSClear, gridBagConstraints);

        jSequenceBrowse.setText("Browse...");
        jSequenceBrowse.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                jSequenceBrowseActionPerformed(evt);
            }
        });

        gridBagConstraints = new java.awt.GridBagConstraints();
        gridBagConstraints.gridx = 0;
        gridBagConstraints.gridy = 2;
        gridBagConstraints.fill = java.awt.GridBagConstraints.HORIZONTAL;
        gridBagConstraints.anchor = java.awt.GridBagConstraints.WEST;
        gridBagConstraints.insets = new java.awt.Insets(70, 0, 2, 0);
        jPanel2.add(jSequenceBrowse, gridBagConstraints);

        jDClear.setText("Clear");
        jDClear.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                jDClearActionPerformed(evt);
            }
        });

        gridBagConstraints = new java.awt.GridBagConstraints();
        gridBagConstraints.gridx = 0;
        gridBagConstraints.gridy = 1;
        gridBagConstraints.fill = java.awt.GridBagConstraints.HORIZONTAL;
        gridBagConstraints.anchor = java.awt.GridBagConstraints.WEST;
        gridBagConstraints.insets = new java.awt.Insets(2, 0, 0, 0);
        jPanel2.add(jDClear, gridBagConstraints);

        jDiamondBrowse.setText("Browse...");
        jDiamondBrowse.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                jDiamondBrowseActionPerformed(evt);
            }
        });

        gridBagConstraints = new java.awt.GridBagConstraints();
        gridBagConstraints.gridx = 0;
        gridBagConstraints.gridy = 0;
        gridBagConstraints.fill = java.awt.GridBagConstraints.HORIZONTAL;
        gridBagConstraints.anchor = java.awt.GridBagConstraints.WEST;
        gridBagConstraints.insets = new java.awt.Insets(42, 0, 2, 0);
        jPanel2.add(jDiamondBrowse, gridBagConstraints);

        gridBagConstraints = new java.awt.GridBagConstraints();
        gridBagConstraints.gridx = 1;
        gridBagConstraints.gridy = 0;
        gridBagConstraints.fill = java.awt.GridBagConstraints.VERTICAL;
        gridBagConstraints.insets = new java.awt.Insets(5, 10, 10, 15);
        getContentPane().add(jPanel2, gridBagConstraints);

        jProgressBar1.setBorder(new javax.swing.border.TitledBorder(" "));
        jProgressBar1.setStringPainted(true);
        gridBagConstraints = new java.awt.GridBagConstraints();
        gridBagConstraints.gridx = 0;
        gridBagConstraints.gridy = 1;
        gridBagConstraints.gridwidth = 2;
        gridBagConstraints.fill = java.awt.GridBagConstraints.BOTH;
        gridBagConstraints.anchor = java.awt.GridBagConstraints.SOUTH;
        getContentPane().add(jProgressBar1, gridBagConstraints);

        jMenu1.setText("File");
        openD.setText("Load Diamonds");
        openD.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                jDiamondBrowseActionPerformed(evt);
            }
        });

        jMenu1.add(openD);

        openS.setText("Load Sequence");
        openS.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                jSequenceBrowseActionPerformed(evt);
            }
        });

        jMenu1.add(openS);

        reset.setText("Reset Fields");
        reset.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                resetActionPerformed(evt);
            }
        });

        jMenu1.add(reset);

        jMenu1.add(jSeparator2);

        align.setText("Align");
        align.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                alignActionPerformed(evt);
            }
        });

        jMenu1.add(align);

        jMenu1.add(jSeparator1);

        exit.setText("Exit");
        exit.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                exitActionPerformed(evt);
            }
        });

        jMenu1.add(exit);

        jMenuBar1.add(jMenu1);

        jMenu2.setText("Help");
        help.setText("Help");
        jMenu2.add(help);

        about.setText("About");
        about.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                aboutActionPerformed(evt);
            }
        });

        jMenu2.add(about);

        jMenuBar1.add(jMenu2);

        setJMenuBar(jMenuBar1);

        pack();
    }
    // </editor-fold>//GEN-END:initComponents

    private void aboutActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_aboutActionPerformed
        alertMessage("Diamond Aligner v0.4\n" +
                "Kevin \"Gali\" Baler\n" +
                "National Institutes of Health, USA\n" +
                "balerk@mail.nih.gov\n" +
                "kb263@cornell.edu\n" +
                "Java "+System.getProperty("java.version"), "About Diamond Aligner", 240, 180);
    }//GEN-LAST:event_aboutActionPerformed

    private void alignActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_alignActionPerformed
        jAlignButtonActionPerformed(evt);
    }//GEN-LAST:event_alignActionPerformed

    private void resetActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_resetActionPerformed
        jDiamondText.setText("");
        jSequenceText.setText("");
        jMismatchText.setText("0");
        jMaximumText.setText("100");
        jOutputText.setText("100");
    }//GEN-LAST:event_resetActionPerformed

    private void exitActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_exitActionPerformed
        System.exit(0);
    }//GEN-LAST:event_exitActionPerformed

    private void jAlignButtonActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_jAlignButtonActionPerformed
        thread = new Thread(this);
        thread.start(); // the run() method runs on a separate thread
    }//GEN-LAST:event_jAlignButtonActionPerformed

    public void run() { // runs on a separate thread
        doAlignment();
    }

    /*Prepares for the align method. Checks text boxes for proper entries.
     */
    private void doAlignment() { 
        if(jDiamondText.getText().equals("")) {
            alertMessage("There must be a list of diamonds in the Diamond Text area.", "No Diamond List Found", 360, 120);
            return;
        } else if(jSequenceText.getText().equals("")) {
            alertMessage("There must be a sequence in the Sequence Text area.", "No Sequence Found", 360, 120);
            return;
        } else if(jMismatchText.getText().equals("")) {
            jMismatchText.setText("0");
            return;
        } else if(jMaximumText.getText().equals("")) {
            jMaximumText.setText("100");
            return;
        } else if(jOutputText.getText().equals("")) {
            jOutputText.setText("100");
            return;
        }
        mismatch = Integer.decode(jMismatchText.getText()).intValue();
        maximum = Integer.decode(jMaximumText.getText()).intValue();
        length = Integer.decode(jOutputText.getText()).intValue();
        getDiamond();
        uppercasesequence = getSequence();
        sequencelength = sequence.length();
        jProgressBar1.setMinimum(0);
        jProgressBar1.setMaximum(diamonds.size());
        align();
    }
    
    /**Stores the list of diamonds from the jDiamondText area into the global variable diamonds.
     */
    private void getDiamond() {
        diamonds.removeAllElements();
        uppercasediamonds.removeAllElements();
        try {
            BufferedReader br  = new BufferedReader(new StringReader(jDiamondText.getText()));
            String line = "";
            for (int i = 0; i <= jDiamondText.getLineCount(); i++) {
                line = br.readLine();
                diamonds.addElement(line);
                uppercasediamonds.addElement(line.toUpperCase());
            }
            br.close();
        } catch(Exception e) {
            e.printStackTrace();                
        }
    }
    
    /**Returns a string with the sequence from the jSequenceText area all in uppercase. 
     *Stores the original string into the variable sequence.
     */
    private String getSequence() {
        sequence = jSequenceText.getText().replaceAll("\n", "");
        return sequence.toUpperCase();
    }

    /**Aligns the Elements in the Diamond Vector with the sequence. 
     * The mismatch number is the count of discrepacies allowed between 
     * the current diamond and the current index of the sequence.
     */
    private void align() {
        javax.swing.border.TitledBorder tb = new javax.swing.border.TitledBorder("Aligning Diamonds");
        jProgressBar1.setBorder(tb);
        int index; //Index of the sequence
        int i; //Index of the diamond vector
        int dsize; //Size of the current diamond
        double allowed = (double)(maximum - mismatch) / maximum;
        int matches = 0; //Matches between the diamond and the current segment
        int conset1 = 0; //consecutive set 1
        int conset2 = 0; //consecutive set 2
        int separator = 0; //The '-' charachter which separates the name from the diamond
        String diamond; //Current diamond
        String name; //Current diamond name
        String namediamond;
        String displaydiamond;
        String display;
        String segment; //Current segment match on sequence for alignment
        String[][] diamondhits = new String[diamonds.size()][2];
        int hits = 0;
        int individualhits = 0;
        Vector result = new Vector(8, 8); //Hit#, Name, Diamond, Segment, Location, Length, Diamond#, %Match
        for (i = 0; i < diamonds.size() - 1; i++) { //Traverse Diamonds vector
            namediamond = uppercasediamonds.elementAt(i).toString(); //Diamond for analysis
            displaydiamond = diamonds.elementAt(i).toString(); //Original case preserved
            if (namediamond.indexOf("-") != -1)
                separator = namediamond.indexOf("-");
            name = displaydiamond.substring(0, separator);
            diamond = namediamond.substring(separator + 1);
            display = displaydiamond.substring(separator + 1);
            dsize = diamond.length();
            individualhits = 0;
            jProgressBar1.setValue(i+1);
            if (canceled) {
                jProgressBar1.setValue(0);
                canceled = false;
                tb.setTitle("");
                jProgressBar1.setBorder(tb);
                return;
            }
            for (index = 0; index < sequencelength - dsize; index++) { //Traverse Sequence
                segment = uppercasesequence.substring(index, index + dsize);
                matches = 0;
                conset1 = 0;
                conset2 = 0;
                boolean set1done = false;
                boolean set2done = false;
                for (int j = 0; j < dsize; j++) { //Traverses the current diamond
                    char dchar = diamond.charAt(j);                    
                    char schar = segment.charAt(j);
                    if (dchar == schar) {
                        matches++;
                        if (set2done) {}
                        else if (set1done) {conset2++;}
                        else {conset1++;}                    //IUPAC Coding begins here:
                    } else if (dchar == 'N') { //N = A,C,G,T
                        matches++;
                        if (set2done) {}
                        else if (set1done) {conset2++;}
                        else {conset1++;}
                    } else if (dchar == 'V' && (schar == 'A' 
                                             || schar == 'C' 
                                             || schar == 'G' 
                                             || schar == 'M' 
                                             || schar == 'R' 
                                             || schar == 'S')) { //V = A,C,G
                        matches++;
                        if (set2done) {}
                        else if (set1done) {conset2++;}
                        else {conset1++;}
                    } else if (dchar == 'H' && (schar == 'A' 
                                             || schar == 'C' 
                                             || schar == 'T' 
                                             || schar == 'M' 
                                             || schar == 'W' 
                                             || schar == 'Y')) { //H = A,C,T
                        matches++;
                        if (set2done) {}
                        else if (set1done) {conset2++;}
                        else {conset1++;}
                    } else if (dchar == 'D' && (schar == 'A' 
                                             || schar == 'G' 
                                             || schar == 'T' 
                                             || schar == 'R' 
                                             || schar == 'W' 
                                             || schar == 'K')) { //D = A,G,T
                        matches++;
                        if (set2done) {}
                        else if (set1done) {conset2++;}
                        else {conset1++;}
                    } else if (dchar == 'B' && (schar == 'C' 
                                             || schar == 'G' 
                                             || schar == 'T' 
                                             || schar == 'S' 
                                             || schar == 'Y' 
                                             || schar == 'K')) { //B = C,G,T
                        matches++;
                        if (set2done) {}
                        else if (set1done) {conset2++;}
                        else {conset1++;}
                    } else if (dchar == 'M' && (schar == 'A' 
                                             || schar == 'C')) { //M = A,C
                        matches++;
                        if (set2done) {}
                        else if (set1done) {conset2++;}
                        else {conset1++;}
                    } else if (dchar == 'R' && (schar == 'A' 
                                             || schar == 'G')) { //R = A,G
                        matches++;
                        if (set2done) {}
                        else if (set1done) {conset2++;}
                        else {conset1++;}
                    } else if (dchar == 'W' && (schar == 'A' 
                                             || schar == 'T')) { //W = A,T
                        matches++;
                        if (set2done) {}
                        else if (set1done) {conset2++;}
                        else {conset1++;}
                    } else if (dchar == 'S' && (schar == 'C' 
                                             || schar == 'G')) { //S = C,G
                        matches++;
                        if (set2done) {}
                        else if (set1done) {conset2++;}
                        else {conset1++;}
                    } else if (dchar == 'Y' && (schar == 'C' 
                                             || schar == 'T')) { //Y = C,T
                        matches++;
                        if (set2done) {}
                        else if (set1done) {conset2++;}
                        else {conset1++;}
                    } else if (dchar == 'K' && (schar == 'G' 
                                             || schar == 'T')) { //K = G,T
                        matches++;
                        if (set2done) {}
                        else if (set1done) {conset2++;}
                        else {conset1++;}
                    } else { //Was a mismatch
                        if (!set1done) {
                            if (conset1 >= 3) {set1done = true;}
                        }
                        if (!set2done) {
                            if (conset2 >=3) {set2done = true;}
                        }
                        if (set1done) {conset2 = 0;} //So reset the consecutive set 2
                        else {conset1 = 0;} //Or reset consecutive set 1
                    }
                }
                if (!set2done) {
                    if (conset2 >=3) {set2done = true;}
                }
                int segmentlength = segment.length();
                int cbp = conset1 + conset2; //Contiguous bp Matches
                double threshold = allowed * segmentlength;
                if (set1done && set2done || (cbp >= threshold)) {
                    hits++;
                    individualhits++;
                    //Results Data: Modified to fix sorting capability
                    String rdn = "000" + Integer.toString(i + 1); //Result: Diamond Number
                    String rih = "000" + Integer.toString(individualhits); //Result: Individual Hits
                    String rch = "000" + Integer.toString(hits); //Result: Current Hit
                    String rli = "000" + Integer.toString(index); //Result: Location Index
                    String rsl = "000" + Integer.toString(segmentlength); //Result: Segment Length
                    String rpa = "000" + matches * 100 / segmentlength + "%"; //Result: Percent Accuracy
                    rdn = rdn.substring(rdn.length()-4, rdn.length());
                    rih = rih.substring(rih.length()-2, rih.length());
                    rch = rch.substring(rch.length()-2, rch.length());
                    rli = rli.substring(rli.length()-4, rli.length());
                    rsl = rsl.substring(rsl.length()-4, rsl.length());
                    rpa = rpa.substring(rpa.length()-4, rpa.length());
                    diamondhits[i][0] = "" + rdn + " " + name +"-"+ display;
                    diamondhits[i][1] = rih;
                    result.add(rch);
                    result.add(name);
                    result.add(display);
                    result.add(sequence.substring(index, index + dsize));
                    result.add(rli);
                    result.add(rsl);
                    result.add(rdn);
                    result.add(rpa);
 
 /*                   diamondhits[i][0] = "" + (i + 1) + " " + name +"-"+ display;
                    diamondhits[i][1] = Integer.toString(individualhits);
                    result.add(Integer.toString(hits));
                    result.add(name);
                    result.add(display);
                    result.add(sequence.substring(index, index + dsize));
                    result.add(Integer.toString(index));
                    result.add(Integer.toString(segmentlength));
                    result.add(Integer.toString(i + 1));
                    result.add(matches * 100 / segmentlength + "%");*/
                }
            }
            if (diamondhits[i][0] == null) {
                diamondhits[i][0] = "" + (i + 1) + " " + name +"-"+ display;
                diamondhits[i][1] = "No Matches";
            }
        }
        
        jProgressBar1.setValue(jProgressBar1.getMaximum());
        tb.setTitle("Generating Result Tables");
        jProgressBar1.setBorder(tb);
        jProgressBar1.setValue(0);
        JFrame rT = resultsTable(result);
        JFrame iDH = individualDiamondHits(diamondhits);
        jProgressBar1.setValue(jProgressBar1.getMaximum());
        tb.setTitle("Generating Visual Alignment Display");
        jProgressBar1.setBorder(tb);
        jProgressBar1.setValue(0);
        JFrame visual = visual(result);
        jProgressBar1.setValue(jProgressBar1.getMaximum());
        rT.setVisible(true);
        iDH.setVisible(true);
        visual.setVisible(true);
        jProgressBar1.setBorder(new javax.swing.border.TitledBorder(""));
        jProgressBar1.setValue(0);
    }
    
    /*Displays a table with the data results of the alignment.
     */
    private JFrame resultsTable(Vector result) {
       	JFrame frame = new JFrame("Results Table");
        frame.getContentPane().setLayout(new BorderLayout());
        frame.setSize(800, 500);
        JPanel panel = new JPanel();
        panel.setBackground(Color.gray);
        panel.setLayout(new BorderLayout());
        TableSorter sorter = new TableSorter((result.size() / 8), 8);
        JTable table = new JTable(sorter);
        sorter.setTableHeader(table.getTableHeader());
        table.getColumn("A").setPreferredWidth(30);
        table.getColumn("A").setHeaderValue("Match No.");
        table.getColumn("B").setHeaderValue("Diamond Name");
        table.getColumn("C").setHeaderValue("Diamond");
        table.getColumn("D").setHeaderValue("Segment");
        table.getColumn("E").setHeaderValue("Base Location");
        table.getColumn("F").setHeaderValue("Diamond Length");
        table.getColumn("G").setHeaderValue("Diamond No.");
        table.getColumn("H").setPreferredWidth(35);
        table.getColumn("H").setHeaderValue("Precision");
        int i = 0;
        for (int r = 0; r < (result.size() / 8); r++) {
            jProgressBar1.setValue(r+1);
            for (int c = 0; c < 8; c++) {
                table.setValueAt(result.elementAt(i), r, c);
                i++;
            }
        }
        table.setShowHorizontalLines(true);
        table.setRowSelectionAllowed(true);
        table.setColumnSelectionAllowed(true);
        table.setFont(new java.awt.Font("Courier New", 0, 13));
        table.setSelectionForeground(Color.white);
        table.setSelectionBackground(Color.black);
        JScrollPane scrollPane = new JScrollPane(table);
        panel.add(scrollPane, BorderLayout.CENTER);
        frame.getContentPane().add(panel, BorderLayout.CENTER);
        center(frame);
        pack();
        return frame;
    }
    
    /*Displays a table with the number of matches per diamond.
     */
    private JFrame individualDiamondHits(String[][] diamondhits) {
       	JFrame frame = new JFrame("Individual Diamond Results Table");
        frame.getContentPane().setLayout(new BorderLayout());
        frame.setSize(360, 300);
        JPanel panel = new JPanel();
        panel.setBackground(Color.gray);
        panel.setLayout(new BorderLayout());
        TableSorter sorter = new TableSorter(diamonds.size() - 1, 2);
        JTable table = new JTable(sorter);
        sorter.setTableHeader(table.getTableHeader());
        table.getColumn("A").setPreferredWidth(250);
        table.getColumn("A").setHeaderValue("Diamond");
        table.getColumn("B").setPreferredWidth(30);
        table.getColumn("B").setHeaderValue("Matches");
        for (int r = 0; r < diamonds.size() - 1; r++) {
            jProgressBar1.setValue(r+1);
            table.setValueAt(diamondhits[r][0], r, 0);
            table.setValueAt(diamondhits[r][1], r, 1);
        }
        table.setShowHorizontalLines(true);
        table.setRowSelectionAllowed(true);
        table.setColumnSelectionAllowed(true);
        table.setFont(new java.awt.Font("Courier New", 0, 13));
        table.setSelectionForeground(Color.white);
        table.setSelectionBackground(Color.black);
        JScrollPane scrollPane = new JScrollPane(table);
        panel.add(scrollPane, BorderLayout.CENTER);
        frame.getContentPane().add(panel, BorderLayout.CENTER);
        center(frame);
        pack();
        return frame;
    }
    
    /*Prepares and formats the alignment results for the visual representation.
     */
    private JFrame visual(Vector result) {
        String text = "";
        int bp = 0;
        String separator = "";
        for (int bar = 0; bar < length + 10; bar++)
            separator += "-";
        int size = result.size();
        for (int i = 0; i < sequence.length(); i++) {
            jProgressBar1.setValue(i+1);
            if (bp == length || bp == sequence.length()) {
                Vector mos = new Vector(1, 1); //Vector of matches on segment
                Vector locate = new Vector(1, 1); //Vector of match locations
                for (int j = 4; j < size; j = j + 8) {
                    int k = 0;
                    String s = (String)result.elementAt(j);
                    try {
                       k = Integer.parseInt(s);}
                    catch(NumberFormatException e) {}
                    if (k > (i - length) && k < i) {
                        mos.add(result.elementAt(j-2));
                        locate.add(Integer.toString(k));
                    }
                }
                String[] segment = new String[1];
                if (locate.size() > 0) {
                    segment = new String[locate.size() + 1];
                }
                segment[0] = "Sequence: " + sequence.substring(i - length, i) + "\n";                
                for (int j = 0; j < locate.size(); j++) {
                    String s = (String)mos.elementAt(j);
                    int loc = 0;
                    String l = (String)locate.elementAt(j);
                    try {
                        loc = Integer.parseInt(l);}
                    catch(NumberFormatException e) {}
                    loc = loc - length * ((i / length) - 1);
                    if (locate.size() > 0) {
                        int p = 0;
                        for (p = 0; segment[p].charAt(loc + 10) == ' '; p++) {}
                        segment[p] += spaces(loc + 10) + s + "\n"; //diamond and spacing
                    }
                }
                for (int c = segment.length - 1; c >= 0; c--) {
                    if (segment[c] == null)
                        segment[c] = "";
                    text = text + segment[c];
                }
                bp = 0;
                text += separator + "\n\n";
                mos.removeAllElements();
                locate.removeAllElements();
            }
            bp++;
//            if (canceled) {
//                jProgressBar1.setValue(0);
//                canceled = false;
//                jProgressBar1.setBorder(new javax.swing.border.TitledBorder(""));
//                return;
//            }
        }
        return graphicalOutput(text);
    }    

    private String spaces(int size) {
        String space = "";
        for (int m = 0; m < size; m++) {
            space += " ";
        }
        return space;
    }
    /*Displays a visual representation of the alignment of the diamonds to the sequence.
     */
    private JFrame graphicalOutput(String visualoutput) {
        JFrame frame = new JFrame("Visual Alignment Display");
        frame.getContentPane().setLayout(new BorderLayout());
        frame.setSize(600, 200);
        JPanel panel = new JPanel();
        panel.setBackground(Color.gray);
        panel.setLayout(new BorderLayout());
        JTextArea text = new JTextArea();
        text.setFont(new java.awt.Font("Courier New", 0, 13));
        text.setEditable(false);
        text.setText(visualoutput);
        JScrollPane pane = new JScrollPane(text);
        panel.add(pane, BorderLayout.CENTER);
        frame.getContentPane().add(panel, BorderLayout.CENTER);
        center(frame);
        pack();
        return frame;
    }
    
    private void jTableActionPerformed(java.awt.event.ActionEvent evt) {                                        
        jSequenceText.setText("");
    }                        

    private void alertMessage(String message, String title, int width, int height) {
        dg = new Dialog(new JFrame());
        dg.setTitle(title);
        dg.setResizable(false);
        dg.setBounds(30, 50, width, height);
        dg.setLayout(new BorderLayout()); 
        JPanel panel = new JPanel();
        panel.setLayout(new FlowLayout(FlowLayout.CENTER, 15, 15));
        JTextPane text = new JTextPane();
        text.setOpaque(false);
        text.setEditable(false);
        text.setText(message);
        panel.add(text);
        dg.add("Center", panel);
        JButton button = new JButton("  OK  ");
        button.addActionListener(this);
        panel = new JPanel();
        panel.setLayout(new FlowLayout());
        panel.add(button);
        dg.add("South", panel);
        center(dg);
        pack();
        dg.setVisible(true);
    }
    
    public void actionPerformed(ActionEvent e) {
        dg.setVisible(false);
        dg.dispose();
    }
    
    /** Positions the specified frame in the center of the screen. */
    public static void center(Window w) {
            Dimension screen = Toolkit.getDefaultToolkit().getScreenSize();
            Dimension window = w.getSize();
            if (window.width==0) return;
            int left = screen.width/2-window.width/2;
            int top = (screen.height-window.height)/4;
            if (top<0) top = 0;
            w.setLocation(left, top);
    }
        
    private void jSClearActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_jSClearActionPerformed
        jSequenceText.setText("");
    }//GEN-LAST:event_jSClearActionPerformed

    private void jDClearActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_jDClearActionPerformed
        jDiamondText.setText("");
    }//GEN-LAST:event_jDClearActionPerformed

    private void jSequenceBrowseActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_jSequenceBrowseActionPerformed
        FileDialog fd = new FileDialog(this, "Open Sequence");
        center(fd);
        fd.setVisible(true);
        String name = fd.getFile();
        String directory = fd.getDirectory();
        if (name==null) return; // user clicked "Cancel"
        try {
            BufferedReader br  = new BufferedReader(new FileReader(directory + File.separator + name));
            String brline = br.readLine();
            for (int i=0; brline!=null; i++) {
                jSequenceText.append(brline + "\n");
                brline = br.readLine();
            }
            br.close();
            jSequenceText.setText(jSequenceText.getText().substring(0, jSequenceText.getText().length() - 2));
            }
        catch(Exception e) {
            e.printStackTrace();                
        }
    }//GEN-LAST:event_jSequenceBrowseActionPerformed

    private void jDiamondBrowseActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_jDiamondBrowseActionPerformed
        FileDialog fd = new FileDialog(this, "Open Diamond Segments");
        center(fd);
        fd.setVisible(true);
        String name = fd.getFile();
        String directory = fd.getDirectory();
        if (name==null) return; // user clicked "Cancel"
        try {
            BufferedReader br  = new BufferedReader(new FileReader(directory + File.separator + name));
            String brline = br.readLine();
            for (int i=0; brline!=null; i++) {
                jDiamondText.append(brline + "\n");
                brline = br.readLine();
            }
            br.close();
            jDiamondText.setText(jDiamondText.getText().substring(0, jDiamondText.getText().length() - 2));
            }
        catch(Exception e) {
            e.printStackTrace();                
        }
    }//GEN-LAST:event_jDiamondBrowseActionPerformed

    private void jCancelButtonActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_jCancelButtonActionPerformed
        canceled = true;
    }//GEN-LAST:event_jCancelButtonActionPerformed
    
    /**
     * @param args the command line arguments
     */
    public static void main(String args[]) {
        java.awt.EventQueue.invokeLater(new Runnable() {
            public void run() {
                JFrame da = new DiamondAligner();
                center(da);
                da.setVisible(true);
            }
        });
    }
    
    // Variables declaration - do not modify//GEN-BEGIN:variables
    private javax.swing.JMenuItem about;
    private javax.swing.JMenuItem align;
    private javax.swing.JMenuItem exit;
    private javax.swing.JMenuItem help;
    private javax.swing.JButton jAlignButton;
    private javax.swing.JButton jCancelButton;
    private javax.swing.JButton jDClear;
    private javax.swing.JButton jDiamondBrowse;
    private javax.swing.JTextArea jDiamondText;
    private javax.swing.JLabel jLabel1;
    private javax.swing.JLabel jLabel2;
    private javax.swing.JLabel jLabel3;
    private javax.swing.JLabel jLabel4;
    private javax.swing.JLabel jLabel5;
    private javax.swing.JTextField jMaximumText;
    private javax.swing.JMenu jMenu1;
    private javax.swing.JMenu jMenu2;
    private javax.swing.JMenuBar jMenuBar1;
    private javax.swing.JTextField jMismatchText;
    private javax.swing.JTextField jOutputText;
    private javax.swing.JPanel jPanel1;
    private javax.swing.JPanel jPanel2;
    private javax.swing.JProgressBar jProgressBar1;
    private javax.swing.JButton jSClear;
    private javax.swing.JScrollPane jScrollPane1;
    private javax.swing.JScrollPane jScrollPane2;
    private javax.swing.JSeparator jSeparator1;
    private javax.swing.JSeparator jSeparator2;
    private javax.swing.JButton jSequenceBrowse;
    private javax.swing.JTextArea jSequenceText;
    private javax.swing.JMenuItem openD;
    private javax.swing.JMenuItem openS;
    private javax.swing.JMenuItem reset;
    // End of variables declaration//GEN-END:variables
    
}
